<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ModuleHelp.Text" xml:space="preserve">
    <value>&lt;h3&gt;Expandable Text/HTML&lt;/h3&gt;
&lt;h4&gt;By IowaComputerGurus Inc.&lt;/h4&gt;

&lt;p&gt;This module allows you to display text elements in a simple manner that allows for expanding and collapsing sections.  Basically a FAQ style module without the requirements of a Q: before hand, also without requiring a postback or AJAX request to display information.&lt;/p&gt;

&lt;p&gt;This module is provided free for use, dontions are appreciated to support future development.  You may donate at http://www.mitchelsellers.com. &lt;/p&gt;

&lt;p&gt;Please visit the support forum if you have any questions.&lt;/p&gt;</value>
  </data>
  <data name="ControlTitle_edit.Text" xml:space="preserve">
    <value>Edit Expandable Text/Html Entries</value>
  </data>
  <data name="DeleteItem.Text" xml:space="preserve">
    <value>Are you sure that you would like to delete this item? </value>
  </data>
  <data name="lblBody.Text" xml:space="preserve">
    <value>Body</value>
  </data>
  <data name="lblTitle.Text" xml:space="preserve">
    <value>Title</value>
  </data>
  <data name="valBody.ErrorMessage" xml:space="preserve">
    <value>Body is required</value>
  </data>
  <data name="valTitle.ErrorMessage" xml:space="preserve">
    <value>Title is required</value>
  </data>
  <data name="lblIsExpanded.Text" xml:space="preserve">
    <value>Show Expanded?</value>
  </data>
  <data name="valSortOrder.ErrorMessage" xml:space="preserve">
    <value>Sort order is required</value>
  </data>
  <data name="lblSortOrder.Help" xml:space="preserve">
    <value>The sort order of the content</value>
  </data>
  <data name="lblSortOrder.Text" xml:space="preserve">
    <value>Sort Order</value>
  </data>
  <data name="SortOrderFormat.ErrorMessage" xml:space="preserve">
    <value>Sort order must be a valid integer value</value>
  </data>
  <data name="lblContentId.Help" xml:space="preserve">
    <value>Once a record is saved, this is the internal HTML Anchor that will allow you to link directly to an item.</value>
  </data>
  <data name="lblContentId.Text" xml:space="preserve">
    <value>Anchor Name</value>
  </data>
  <data name="DateField.Text" xml:space="preserve">
    <value>Must be MM/DD/YYYY format</value>
  </data>
  <data name="lblPublishDate.Help" xml:space="preserve">
    <value>Date in which the content should be published.  If set to the future, only those with edit permissions will be able to see the content.</value>
  </data>
  <data name="lblPublishDate.Text" xml:space="preserve">
    <value>Publish Date</value>
  </data>
  <data name="lblRequiredRole.Help" xml:space="preserve">
    <value>Determines who can see the content.  If set to "Same as Module" the module settings will apply, any other role selection will require that the user have that role.</value>
  </data>
  <data name="lblRequiredRole.Text" xml:space="preserve">
    <value>Security Level Required</value>
  </data>
  <data name="SameAsModule.Text" xml:space="preserve">
    <value>Same as Module</value>
  </data>
  <data name="ItemContent.Text" xml:space="preserve">
    <value>Item Content</value>
  </data>
  <data name="lblBody.Help" xml:space="preserve">
    <value>The content to show when the item is expanded</value>
  </data>
  <data name="lblIsExpanded.Help" xml:space="preserve">
    <value>If selected content will show as expanded by default.</value>
  </data>
  <data name="lblTitle.Help" xml:space="preserve">
    <value>The title for the content, also will become the clickable header for expanding/collapsing</value>
  </data>
  <data name="PublishOptions.Text" xml:space="preserve">
    <value>Publish Options</value>
  </data>
</root>