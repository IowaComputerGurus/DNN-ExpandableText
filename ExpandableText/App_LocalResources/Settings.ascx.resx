<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ControlTitle_settings.Text" xml:space="preserve">
    <value>Expandable Text/Html Settings</value>
  </data>
  <data name="ModuleHelp.Text" xml:space="preserve">
    <value>&lt;h3&gt;Expandable Text/HTML&lt;/h3&gt;
&lt;h4&gt;By IowaComputerGurus Inc.&lt;/h4&gt;

&lt;p&gt;This module allows you to display text elements in a simple manner that allows for expanding and collapsing sections.  Basically a FAQ style module without the requirements of a Q: before hand, also without requiring a postback or AJAX request to display information.&lt;/p&gt;

&lt;p&gt;New in version 1.4.0 is the ability to modify the display template.  Via the localization files you can change the display template for the module.  Three new Resource Keys exist (HeaderTemplate, ItemTemplate, and FooterTemplate) that can be used to change the overall look and feel of the display.  In your ItemTemplate you can use the following tokens for display [EDIT], [TITLE] and [CONTENT].&lt;/p&gt;

&lt;p&gt;This module is provided free for use, dontions are appreciated to support future development.  You may donate at http://www.mitchelsellers.com. &lt;/p&gt;

&lt;p&gt;Please visit the support forum if you have any questions.&lt;/p&gt;</value>
  </data>
  <data name="lblSortOrder.Help" xml:space="preserve">
    <value>How will the text items be sorted when displayed</value>
  </data>
  <data name="lblSortOrder.Text" xml:space="preserve">
    <value>Sort Order</value>
  </data>
  <data name="ContentCssClassRequired.Text" xml:space="preserve">
    <value>You must supply a CSS class for the content</value>
  </data>
  <data name="lblContentCssClass.Help" xml:space="preserve">
    <value>The CSS class that is applied as a blanket to the content inside the module</value>
  </data>
  <data name="lblContentCssClass.Text" xml:space="preserve">
    <value>Content CSS Class</value>
  </data>
  <data name="lblTitleCssClass.Help" xml:space="preserve">
    <value>The CSS Class that is applied to the title link</value>
  </data>
  <data name="lblTitleCssClass.Text" xml:space="preserve">
    <value>Title CSS Class</value>
  </data>
  <data name="TitleCssClassRequired.Text" xml:space="preserve">
    <value>You must supply a CSS class for the title</value>
  </data>
  <data name="lblExpandOnPrint.Help" xml:space="preserve">
    <value>If selected, when in printable view ALL items will appear as expanded</value>
  </data>
  <data name="lblExpandOnPrint.Text" xml:space="preserve">
    <value>Expand All On Print?</value>
  </data>
  <data name="lblHeader.Help" xml:space="preserve">
    <value>You may specify an optional header to display above the content of this module.</value>
  </data>
  <data name="lblHeader.Text" xml:space="preserve">
    <value>Header</value>
  </data>
  <data name="lblUseJquery.Help" xml:space="preserve">
    <value>If checked, jQuery effects will be used on expand and collapse, to create a smooth, fly-in, fly-out transition.</value>
  </data>
  <data name="lblUseJquery.Text" xml:space="preserve">
    <value>Use jQuery Effects</value>
  </data>
  <data name="lblDefaultShowLimit.Help" xml:space="preserve">
    <value>A selection of a value other than "All" will limit the display by default to show only those entries.</value>
  </data>
  <data name="lblDefaultShowLimit.Text" xml:space="preserve">
    <value>Display Limit</value>
  </data>
  <data name="lblShowAllText.Help" xml:space="preserve">
    <value>The text to display if limiting the display an more entries exist.  Leave blank to not display additional items.</value>
  </data>
  <data name="lblShowAllText.Text" xml:space="preserve">
    <value>Show All Text</value>
  </data>
  <data name="lblShowExpandCollapseAll.Help" xml:space="preserve">
    <value>If checked, options to expand/collapse all</value>
  </data>
  <data name="lblShowExpandCollapseAll.Text" xml:space="preserve">
    <value>Show Expand/Collapse All</value>
  </data>
  <data name="DisplayOptions.Text" xml:space="preserve">
    <value>Display Options</value>
  </data>
  <data name="OptionalHeader.Text" xml:space="preserve">
    <value>Optional Header</value>
  </data>
  <data name="StyleOptions.Text" xml:space="preserve">
    <value>Style Options</value>
  </data>
</root>